Sección docker.

    Primeros pasos:
        Instalación de docker, kubertenes, minikube, docker compose y aws2

    Comandos basicos:
    Listar las imagenes en el sistema
        docker image ls
    Construir una imagen
        docker build
    Borrar imagen
        docker image rm idImagen
    Construir una imagen con etiqueta
        docker build -t helloworld:1.0
    Etiquetar una imagen como latest
        docker tag helloworld:1.0 helloworld:latest (Nos facilita saber cual es la última imagen editada, mas actualizada)
    Para obtener toda la info (metadatos) de la imagen
        docker inspect helloworld:latest

    Comandos enfocados a contenedores: 
    Crear un contenedor (Parado)
        docker create helloworld
    Crear un contenedor con un nombre
        docker create --name web01 helloworld:latest
    Iniciar un contenedor
        docker start nombreContenedor/idContenedor
    Inspeccionar contenedor
        docker inspect nombreContenedor/idContenedor
    Parar un contenedor
        docker stop nombreContenedor/idContenedor
    Parar y eliminar un contenedor que está en uso
        docker rm name -f
    El orden es hacer stop y eliminarlo de una forma limpia con
        docker rm name

    Comandos enfocados a puertos
    Obtener las IPS por nombre
        docker inspect NAME | grep IPAddress
    Crear un contenedor con un puerto especifico
        docker create -p 8080:80 --name web01 helloworld:latest
    Crear un contenedor y ponerlo a correr en segundo plano con el puerto expuesto (EXPOSE PORT (Dockerfile))
        docker create -P --name web01 helloworld:lates

    Comandos enfocados a troubleshouting
    Listar los ficheros que hay en el directorio en el que se conecta
        docker exec web01 ls
    Listar los procesos que hay ejecutandose en el contenedor
        docker exec web01 ps
    Para ejecutar bash y entrar dentro del contenedor y poder operar como una consola propia
        docker exec -it web01 bash
    Nota: De momento nuestros contenedores no son persistentes, si por ejemplo, estando en bash actualizo y/o instalo una serie de cosas no se van a guardar en la imagen si la vuelvo a levantar mas tarde

    Comandos enfocados a volumenes (Persistencia)
    Listar todos los volumenes
        docker volume ls
    Crear un volumen y darle un nombre
        docker volume create my-volume
    Inspeccionar un volumen, es importante el mountpoint
        docker volume inspect my-volume
    Crear un contenedor y asignarle un volumen ya creado (Comparten mountpoint)
        docker create -P --mount source=my-volume,target=/var/www/html --name web01 helloworld:latest
    Elimiar un volumen
        docker volume rm my-volume
    Eliminar los volumenes que no están en uso (Corriendo en un contenedor)
        docker volume prune

    Comandos enfocados a network
    Mostrar todas las redes creadas (Hay 3 por defecto y se pueden desarrollar más)
        docker network ls
    Crear una red y asignarle un driver
        docker network create web --driver bridge
    Crear un contenedor y asignarle una red ya creada
        docker create --name web01 --network web helloworld
    Nota: Importante,  sólo se pueden comunicar los contenedores que están dentro de la misma red, obviamente desde fuera de los contenedores puedo consultar todos los datos de la redes porque no estoy metido en ninguna subred
    Añadir o quitar una red de un contenedor ya creado
        docker connect web web01
        docker disconnect web web01

    Docker hub
    Registro en dockerhub, el repositorio gratuito es público
    Logearnos en dockerhub desde terminal
        docker login
    Etiquetar una imagen para subirla
        docker tag imagenlocal:etiqueta usuarioremoto/imagenremota:etiqueta
    Pushear una imagen
        docker push usuarioremoto/imagenremota:etiqueta
    Pullear una imagen
        docker pull usuarioremoto/imagen:etiqueta

    Variables de entorno
    Mostrar variables de entorno
        env
    Mostrar una variable de entorno en concreta 
        echo $variable
    Crear un contenendor y asignarle una serie de variables de entorno
        docker create --name nombreImagen -e variable1=valor1 -e variable2=valor2 imagen:tag
    
    Supervisor
    ¿Qué es?
        Sistema de control de procesos básicamente es un programa, que nos permite la manipulación de nuestro servicios, esto ya se para iniciar un servicio, detener al servicio reiniciar etc...
        Con supervisor podemos hacer ejecutar varios procesos y servicios en nuestro contenedor
        Es necesario crear un archivo de configuración -> supervisor_services.conf, donde especifico los programas a supervisar
        Tambien es necesario indicarlo en el Dockerfile, ahora el CMD o proceso no será, por ejemplo apache, sino supervisor
            RUN apt-get install supervisor -y
            ADD supervisor_services.conf /etc/supervisor/conf.d/
            CMD supervisord -n -c /etc/supervisor/supervisord.conf
    
    Docker-compose
    ¿Qué es?
    Docker Compose es una herramienta desarrollada para ayudar a definir y compartir aplicaciones de varios contenedores. Con Compose, puede crear un archivo YAML para definir los servicios y, con un solo comando, ponerlo todo en marcha o eliminarlo
    El fichero de configuración es denominado docker-compose.yaml y tiene una estructura propia
    Puedo obtener la imagen de una imagen ya creada image: imagen:tag o buildearla build:rutaDockerfile
    Iniciar un docker-compose y pararlo
        docker-compose up -d
        docker-compose stop
    Ver los logs 
        docker-compose logs -f
    Buildear sin iniciar (Sin up, no habría start)
        docker-compose build